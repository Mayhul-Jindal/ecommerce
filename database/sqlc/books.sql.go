// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: books.sql

package sqlc

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "Books" (
  title, author, tags_array, price, quantity, description
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, title, author, tags_array, price, quantity, description, created_at
`

type CreateBookParams struct {
	Title       string  `json:"title"`
	Author      string  `json:"author"`
	TagsArray   []int32 `json:"tags_array"`
	Price       int32   `json:"price"`
	Quantity    int32   `json:"quantity"`
	Description string  `json:"description"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.TagsArray,
		arg.Price,
		arg.Quantity,
		arg.Description,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.TagsArray,
		&i.Price,
		&i.Quantity,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM "Books"
WHERE id = $1
`

func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBook = `-- name: GetBook :one
select id, title, author, tags_array, price, quantity, description, created_at from "Books"
where id = $1 limit 1
`

func (q *Queries) GetBook(ctx context.Context, id int64) (Book, error) {
	row := q.db.QueryRow(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.TagsArray,
		&i.Price,
		&i.Quantity,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getBooks = `-- name: GetBooks :many
select id, title, author, tags_array, price, quantity, description, created_at from "Books"
limit $1
offset $2
`

type GetBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetBooks(ctx context.Context, arg GetBooksParams) ([]Book, error) {
	rows, err := q.db.Query(ctx, getBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Book{}
	for rows.Next() {
		var i Book
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.TagsArray,
			&i.Price,
			&i.Quantity,
			&i.Description,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBookDesc = `-- name: UpdateBookDesc :one
UPDATE "Books"
set "description" = $2
WHERE "id" = $1
RETURNING id, title, author, tags_array, price, quantity, description, created_at
`

type UpdateBookDescParams struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

func (q *Queries) UpdateBookDesc(ctx context.Context, arg UpdateBookDescParams) (Book, error) {
	row := q.db.QueryRow(ctx, updateBookDesc, arg.ID, arg.Description)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.TagsArray,
		&i.Price,
		&i.Quantity,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}
