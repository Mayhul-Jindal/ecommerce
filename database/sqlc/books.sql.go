// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: books.sql

package database

import (
	"context"
)

const createBook = `-- name: CreateBook :one
INSERT INTO "Books" (
  title, author, tags_array, price, description
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id, title, author, tags_array, price, description, download_link, created_at
`

type CreateBookParams struct {
	Title       string  `json:"title"`
	Author      string  `json:"author"`
	TagsArray   []int32 `json:"tags_array"`
	Price       int32   `json:"price"`
	Description string  `json:"description"`
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (Book, error) {
	row := q.db.QueryRow(ctx, createBook,
		arg.Title,
		arg.Author,
		arg.TagsArray,
		arg.Price,
		arg.Description,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.TagsArray,
		&i.Price,
		&i.Description,
		&i.DownloadLink,
		&i.CreatedAt,
	)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE FROM "Books"
WHERE id = $1
`

// TODO: What happens when a book is deleted ?
func (q *Queries) DeleteBook(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteBook, id)
	return err
}

const getBookById = `-- name: GetBookById :one


UPDATE "Books"
set "description" = $2
WHERE "id" = $1
RETURNING id, title, author, tags_array, price, description, download_link, created_at
`

type GetBookByIdParams struct {
	ID          int64  `json:"id"`
	Description string `json:"description"`
}

// select b.id, b.title, b.author, b.price, array_agg(r.comment) as comments from "Books" b
// join "Reviews" r on r.book_id = b.id
// where b.id = $1
// group by b.id, b.title, b.author, b.price;
func (q *Queries) GetBookById(ctx context.Context, arg GetBookByIdParams) (Book, error) {
	row := q.db.QueryRow(ctx, getBookById, arg.ID, arg.Description)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Author,
		&i.TagsArray,
		&i.Price,
		&i.Description,
		&i.DownloadLink,
		&i.CreatedAt,
	)
	return i, err
}
