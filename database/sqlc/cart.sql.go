// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: cart.sql

package database

import (
	"context"
)

const addToCart = `-- name: AddToCart :one
INSERT INTO "Carts" (
  user_id, book_id
) VALUES (
  $1, $2
)
RETURNING id, user_id, book_id, created_at
`

type AddToCartParams struct {
	UserID int64 `json:"user_id"`
	BookID int64 `json:"book_id"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (Cart, error) {
	row := q.db.QueryRow(ctx, addToCart, arg.UserID, arg.BookID)
	var i Cart
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCartItem = `-- name: DeleteCartItem :exec
DELETE FROM "Carts"
WHERE user_id = $1 and book_id = $2
`

type DeleteCartItemParams struct {
	UserID int64 `json:"user_id"`
	BookID int64 `json:"book_id"`
}

func (q *Queries) DeleteCartItem(ctx context.Context, arg DeleteCartItemParams) error {
	_, err := q.db.Exec(ctx, deleteCartItem, arg.UserID, arg.BookID)
	return err
}

const getCartItemsByUserId = `-- name: GetCartItemsByUserId :many
select b.id, b.title, b.price from "Carts" c
join "Books" b on b.id = c.book_id 
where c.user_id = $1
`

type GetCartItemsByUserIdRow struct {
	ID    int64  `json:"id"`
	Title string `json:"title"`
	Price int32  `json:"price"`
}

func (q *Queries) GetCartItemsByUserId(ctx context.Context, userID int64) ([]GetCartItemsByUserIdRow, error) {
	rows, err := q.db.Query(ctx, getCartItemsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsByUserIdRow{}
	for rows.Next() {
		var i GetCartItemsByUserIdRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalCartAmountById = `-- name: GetTotalCartAmountById :one
select sum(b.price) as total_money from "Carts" c
join "Books" b on c.book_id = b.id
where c.user_id = $1
group by user_id
`

func (q *Queries) GetTotalCartAmountById(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getTotalCartAmountById, userID)
	var total_money int64
	err := row.Scan(&total_money)
	return total_money, err
}
