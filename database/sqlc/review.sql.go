// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: review.sql

package database

import (
	"context"
)

const createReview = `-- name: CreateReview :one
INSERT INTO "Reviews" (
  user_id, book_id, rating, comment
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, user_id, book_id, rating, comment, created_at
`

type CreateReviewParams struct {
	UserID  int64  `json:"user_id"`
	BookID  int64  `json:"book_id"`
	Rating  int32  `json:"rating"`
	Comment string `json:"comment"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, createReview,
		arg.UserID,
		arg.BookID,
		arg.Rating,
		arg.Comment,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM "Reviews"
WHERE id = $1
`

func (q *Queries) DeleteReview(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteReview, id)
	return err
}

const getReviewsByBookId = `-- name: GetReviewsByBookId :many
select id, user_id, book_id, rating, comment, created_at from "Reviews"
where book_id = $1
limit $2
offset $3
`

type GetReviewsByBookIdParams struct {
	BookID int64 `json:"book_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetReviewsByBookId(ctx context.Context, arg GetReviewsByBookIdParams) ([]Review, error) {
	rows, err := q.db.Query(ctx, getReviewsByBookId, arg.BookID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Review{}
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.BookID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE "Reviews"
set "rating" = $2, "comment" = $3
WHERE "id" = $1
RETURNING id, user_id, book_id, rating, comment, created_at
`

type UpdateReviewParams struct {
	ID      int64  `json:"id"`
	Rating  int32  `json:"rating"`
	Comment string `json:"comment"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRow(ctx, updateReview, arg.ID, arg.Rating, arg.Comment)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}
