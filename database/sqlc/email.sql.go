// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: email.sql

package database

import (
	"context"
)

const createVerifyEmail = `-- name: CreateVerifyEmail :one
INSERT INTO "Verify_Emails" (
    user_id,
    email,
    secret_code
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyEmailParams struct {
	UserID     int64  `json:"user_id"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerifyEmail(ctx context.Context, arg CreateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, createVerifyEmail, arg.UserID, arg.Email, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const deleteVerifyEmailsOfUser = `-- name: DeleteVerifyEmailsOfUser :exec
delete from "Verify_Emails"
where user_id = $1
`

func (q *Queries) DeleteVerifyEmailsOfUser(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deleteVerifyEmailsOfUser, userID)
	return err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE "Verify_Emails"
SET
    is_used = TRUE
WHERE
    id = $1
    AND secret_code = $2
    AND is_used = FALSE
    AND expired_at > now()
RETURNING id, user_id, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyEmailParams struct {
	ID         int64  `json:"id"`
	SecretCode string `json:"secret_code"`
}

// todo test this timeout feature how is this working
func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (VerifyEmail, error) {
	row := q.db.QueryRow(ctx, updateVerifyEmail, arg.ID, arg.SecretCode)
	var i VerifyEmail
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}
