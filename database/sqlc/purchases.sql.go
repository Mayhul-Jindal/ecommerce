// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: purchases.sql

package database

import (
	"context"
	"time"
)

const checkBookPurchased = `-- name: CheckBookPurchased :one
select id, user_id, book_id, order_id, created_at from "Purchases"
where user_id = $1 and book_id = $2
`

type CheckBookPurchasedParams struct {
	UserID int64 `json:"user_id"`
	BookID int64 `json:"book_id"`
}

func (q *Queries) CheckBookPurchased(ctx context.Context, arg CheckBookPurchasedParams) (Purchase, error) {
	row := q.db.QueryRow(ctx, checkBookPurchased, arg.UserID, arg.BookID)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const createPurchase = `-- name: CreatePurchase :one
INSERT INTO "Purchases" (
  user_id, book_id, order_id
) VALUES (
  $1, $2, $3
)
RETURNING id, user_id, book_id, order_id, created_at
`

type CreatePurchaseParams struct {
	UserID  int64 `json:"user_id"`
	BookID  int64 `json:"book_id"`
	OrderID int64 `json:"order_id"`
}

func (q *Queries) CreatePurchase(ctx context.Context, arg CreatePurchaseParams) (Purchase, error) {
	row := q.db.QueryRow(ctx, createPurchase, arg.UserID, arg.BookID, arg.OrderID)
	var i Purchase
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BookID,
		&i.OrderID,
		&i.CreatedAt,
	)
	return i, err
}

const deletePurchase = `-- name: DeletePurchase :exec
DELETE FROM "Purchases"
WHERE user_id = $1
`

func (q *Queries) DeletePurchase(ctx context.Context, userID int64) error {
	_, err := q.db.Exec(ctx, deletePurchase, userID)
	return err
}

const getPurchasedBooks = `-- name: GetPurchasedBooks :many
with cte as (
    select id, user_id, book_id, order_id, created_at from "Purchases"
    where user_id = $1
)
select b.id, title, author, tags_array, price, description, download_link, b.created_at, cte.id, user_id, book_id, order_id, cte.created_at from "Books" b
join cte on cte.book_id = b.id
limit $2
offset $3
`

type GetPurchasedBooksParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetPurchasedBooksRow struct {
	ID           int64     `json:"id"`
	Title        string    `json:"title"`
	Author       string    `json:"author"`
	TagsArray    []int32   `json:"tags_array"`
	Price        int32     `json:"price"`
	Description  string    `json:"description"`
	DownloadLink string    `json:"download_link"`
	CreatedAt    time.Time `json:"created_at"`
	ID_2         int64     `json:"id_2"`
	UserID       int64     `json:"user_id"`
	BookID       int64     `json:"book_id"`
	OrderID      int64     `json:"order_id"`
	CreatedAt_2  time.Time `json:"created_at_2"`
}

// todo this is to get bought books at a single place
func (q *Queries) GetPurchasedBooks(ctx context.Context, arg GetPurchasedBooksParams) ([]GetPurchasedBooksRow, error) {
	rows, err := q.db.Query(ctx, getPurchasedBooks, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPurchasedBooksRow{}
	for rows.Next() {
		var i GetPurchasedBooksRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Author,
			&i.TagsArray,
			&i.Price,
			&i.Description,
			&i.DownloadLink,
			&i.CreatedAt,
			&i.ID_2,
			&i.UserID,
			&i.BookID,
			&i.OrderID,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
