// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: order.sql

package database

import (
	"context"
)

const addOrder = `-- name: AddOrder :one
INSERT INTO "Orders" (
  razorpay_order_id, user_id, total_money, status
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, razorpay_order_id, user_id, total_money, status, created_at
`

type AddOrderParams struct {
	RazorpayOrderID string  `json:"razorpay_order_id"`
	UserID          int64   `json:"user_id"`
	TotalMoney      float64 `json:"total_money"`
	Status          string  `json:"status"`
}

func (q *Queries) AddOrder(ctx context.Context, arg AddOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, addOrder,
		arg.RazorpayOrderID,
		arg.UserID,
		arg.TotalMoney,
		arg.Status,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.RazorpayOrderID,
		&i.UserID,
		&i.TotalMoney,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getOrderId = `-- name: GetOrderId :one
select id from "Orders"
where id = $1
`

func (q *Queries) GetOrderId(ctx context.Context, id int64) (int64, error) {
	row := q.db.QueryRow(ctx, getOrderId, id)
	err := row.Scan(&id)
	return id, err
}
