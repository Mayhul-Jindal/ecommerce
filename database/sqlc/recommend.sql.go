// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: recommend.sql

package database

import (
	"context"
)

const getHotSellingBooks = `-- name: GetHotSellingBooks :many
with cte as 
(
    select book_id from "Purchases"
    group by book_id
    order by created_at desc
    limit $1
    offset $2
)
select title, author, price from "Books" b
JOIN cte ON b.id = cte.book_id
`

type GetHotSellingBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetHotSellingBooksRow struct {
	Title  string `json:"title"`
	Author string `json:"author"`
	Price  int32  `json:"price"`
}

func (q *Queries) GetHotSellingBooks(ctx context.Context, arg GetHotSellingBooksParams) ([]GetHotSellingBooksRow, error) {
	rows, err := q.db.Query(ctx, getHotSellingBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHotSellingBooksRow{}
	for rows.Next() {
		var i GetHotSellingBooksRow
		if err := rows.Scan(&i.Title, &i.Author, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRecommendations = `-- name: GetUserRecommendations :many
with cte as 
(
    select user_id, book_id from "Purchases" p
    where p.user_id = $1 and p.order_id = $2
)
select cte.user_id, string_agg(t.tag_name, ' ') from "Books" b
join cte on cte.book_id = b.id
left join "Tags" t on t.id = ANY(b.tag_array)
group by cte.user_id, t.tag_name
limit $3
offset $4
`

type GetUserRecommendationsParams struct {
	UserID  int64 `json:"user_id"`
	OrderID int64 `json:"order_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type GetUserRecommendationsRow struct {
	UserID    int64  `json:"user_id"`
	StringAgg []byte `json:"string_agg"`
}

func (q *Queries) GetUserRecommendations(ctx context.Context, arg GetUserRecommendationsParams) ([]GetUserRecommendationsRow, error) {
	rows, err := q.db.Query(ctx, getUserRecommendations,
		arg.UserID,
		arg.OrderID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetUserRecommendationsRow{}
	for rows.Next() {
		var i GetUserRecommendationsRow
		if err := rows.Scan(&i.UserID, &i.StringAgg); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
