// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: recommend.sql

package database

import (
	"context"
)

const getHotSellingBooks = `-- name: GetHotSellingBooks :many
SELECT b.title, b.author, b.price FROM "Books" b
JOIN "Purchases" p ON b.id = p.book_id
GROUP BY p.book_id, b.title, b.author, b.price
ORDER BY COUNT(*) DESC
LIMIT $1
OFFSET $2
`

type GetHotSellingBooksParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetHotSellingBooksRow struct {
	Title  string `json:"title"`
	Author string `json:"author"`
	Price  int32  `json:"price"`
}

func (q *Queries) GetHotSellingBooks(ctx context.Context, arg GetHotSellingBooksParams) ([]GetHotSellingBooksRow, error) {
	rows, err := q.db.Query(ctx, getHotSellingBooks, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetHotSellingBooksRow{}
	for rows.Next() {
		var i GetHotSellingBooksRow
		if err := rows.Scan(&i.Title, &i.Author, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserRecommendations = `-- name: GetUserRecommendations :many
with cte as (
	SELECT string_agg(t.tag_name, ' ') as all_tags FROM "Purchases" p
	JOIN "Books" b ON p.book_id = b.id
	LEFT JOIN "Tags" t ON t.id = ANY(b.tags_array)
	WHERE p.user_id = $1 AND p.order_id = $2
	GROUP BY p.user_id, t.tag_name
)
select string_agg(all_tags, ' ') from cte
`

type GetUserRecommendationsParams struct {
	UserID  int64 `json:"user_id"`
	OrderID int64 `json:"order_id"`
}

func (q *Queries) GetUserRecommendations(ctx context.Context, arg GetUserRecommendationsParams) ([][]byte, error) {
	rows, err := q.db.Query(ctx, getUserRecommendations, arg.UserID, arg.OrderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := [][]byte{}
	for rows.Next() {
		var string_agg []byte
		if err := rows.Scan(&string_agg); err != nil {
			return nil, err
		}
		items = append(items, string_agg)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
